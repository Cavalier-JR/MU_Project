{"version":3,"file":"row.js","sources":["../../../../../../../packages/components/table-v2/src/components/row.tsx"],"sourcesContent":["import {\n  computed,\n  defineComponent,\n  inject,\n  nextTick,\n  onMounted,\n  ref,\n  unref,\n} from 'vue'\nimport { isArray, isFunction, isNumber } from '@element-plus/utils'\nimport { tableV2RowProps } from '../row'\nimport { TableV2InjectionKey } from '../tokens'\nimport { placeholderSign } from '../private'\n\nimport type { CSSProperties, RendererElement, RendererNode, VNode } from 'vue'\nimport type { RowEventHandlers, TableV2RowProps } from '../row'\n\ntype CustomizedCellsType = VNode<\n  RendererNode,\n  RendererElement,\n  {\n    [key: string]: any\n  }\n>[]\n\ntype DefaultCellsType = VNode<\n  RendererNode,\n  RendererElement,\n  {\n    [key: string]: any\n  }\n>[][]\n\ntype ColumnCellsType = DefaultCellsType | CustomizedCellsType\n\nconst useTableRow = (props: TableV2RowProps) => {\n  const { isScrolling } = inject(TableV2InjectionKey)!\n\n  const measured = ref(false)\n  const rowRef = ref<HTMLElement>()\n  const measurable = computed(() => {\n    return isNumber(props.estimatedRowHeight) && props.rowIndex >= 0\n  })\n\n  const doMeasure = (isInit = false) => {\n    const $rowRef = unref(rowRef)\n    if (!$rowRef) return\n    const { columns, onRowHeightChange, rowKey, rowIndex, style } = props\n    const { height } = $rowRef.getBoundingClientRect()\n    measured.value = true\n\n    nextTick(() => {\n      if (isInit || height !== Number.parseInt(style!.height as string)) {\n        const firstColumn = columns[0]\n        const isPlaceholder = firstColumn?.placeholderSign === placeholderSign\n        onRowHeightChange?.(\n          { rowKey, height, rowIndex },\n          firstColumn && !isPlaceholder && firstColumn.fixed\n        )\n      }\n    })\n  }\n\n  const eventHandlers = computed(() => {\n    const { rowData, rowIndex, rowKey, onRowHover } = props\n    const handlers = props.rowEventHandlers || ({} as RowEventHandlers)\n    const eventHandlers = {} as {\n      [key in keyof RowEventHandlers]: (e: Event) => void\n    }\n\n    Object.entries(handlers).forEach(([eventName, handler]) => {\n      if (isFunction(handler)) {\n        eventHandlers[eventName as keyof RowEventHandlers] = (event: Event) => {\n          handler({\n            event,\n            rowData,\n            rowIndex,\n            rowKey,\n          })\n        }\n      }\n    })\n\n    if (onRowHover) {\n      ;(\n        [\n          { name: 'onMouseleave', hovered: false },\n          { name: 'onMouseenter', hovered: true },\n        ] as const\n      ).forEach(({ name, hovered }) => {\n        const existedHandler = eventHandlers[name]\n        eventHandlers[name] = ((event: MouseEvent) => {\n          onRowHover({\n            event,\n            hovered,\n            rowData,\n            rowIndex,\n            rowKey,\n          })\n\n          existedHandler?.(event)\n        }) as any\n      })\n    }\n    return eventHandlers\n  })\n\n  const onExpand = (expanded: boolean) => {\n    const { onRowExpand, rowData, rowIndex, rowKey } = props\n\n    onRowExpand?.({\n      expanded,\n      rowData,\n      rowIndex,\n      rowKey,\n    })\n  }\n\n  onMounted(() => {\n    if (unref(measurable)) {\n      doMeasure(true)\n    }\n  })\n\n  return { isScrolling, measurable, measured, rowRef, eventHandlers, onExpand }\n}\n\nconst COMPONENT_NAME = 'ElTableV2TableRow'\n\nconst TableV2Row = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2RowProps,\n  setup(props, { expose, slots, attrs }) {\n    const {\n      eventHandlers,\n      isScrolling,\n      measurable,\n      measured,\n      rowRef,\n\n      onExpand,\n    } = useTableRow(props)\n\n    expose({\n      /**\n       * @description manually dispatching expand action on row.\n       */\n      onExpand,\n    })\n\n    return () => {\n      const {\n        columns,\n        columnsStyles,\n        expandColumnKey,\n        depth,\n        rowData,\n        rowIndex,\n        style,\n      } = props\n\n      let ColumnCells: ColumnCellsType = columns.map((column, columnIndex) => {\n        const expandable =\n          isArray(rowData.children) &&\n          rowData.children.length > 0 &&\n          column.key === expandColumnKey\n\n        return slots.cell!({\n          column,\n          columns,\n          columnIndex,\n          depth,\n          style: columnsStyles[column.key],\n          rowData,\n          rowIndex,\n          isScrolling: unref(isScrolling),\n          expandIconProps: expandable\n            ? {\n                rowData,\n                rowIndex,\n                onExpand,\n              }\n            : undefined,\n        })\n      })\n\n      if (slots.row) {\n        ColumnCells = slots.row({\n          cells: ColumnCells.map((node) => {\n            if (isArray(node) && node.length === 1) {\n              return node[0]\n            }\n            return node\n          }),\n          style,\n          columns,\n          depth,\n          rowData,\n          rowIndex,\n          isScrolling: unref(isScrolling),\n        })\n      }\n\n      if (unref(measurable)) {\n        // eslint-disable-next-line @typescript-eslint/no-unused-vars\n        const { height, ...exceptHeightStyle } = style || {}\n        const _measured = unref(measured)\n        return (\n          <div\n            ref={rowRef}\n            class={props.class}\n            style={_measured ? style : exceptHeightStyle}\n            {...attrs}\n            {...unref(eventHandlers)}\n          >\n            {ColumnCells}\n          </div>\n        )\n      }\n\n      return (\n        <div\n          {...attrs}\n          ref={rowRef}\n          class={props.class}\n          style={style}\n          {...unref(eventHandlers)}\n        >\n          {ColumnCells}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2Row\n\nexport type TableV2RowCellRenderParam = {\n  column: TableV2RowProps['columns'][number]\n  columns: TableV2RowProps['columns']\n  columnIndex: number\n  depth: number\n  style: CSSProperties\n  rowData: any\n  rowIndex: number\n  isScrolling: boolean\n  expandIconProps?: {\n    rowData: any\n    rowIndex: number\n    onExpand: (expand: boolean) => void\n  }\n}\n"],"names":["useTableRow","isScrolling","inject","TableV2InjectionKey","measured","ref","rowRef","computed","isNumber","doMeasure","columns","onRowHeightChange","rowKey","rowIndex","style","height","$rowRef","getBoundingClientRect","value","nextTick","parseInt","firstColumn","placeholderSign","rowData","onRowHover","handlers","props","rowEventHandlers","eventHandlers","Object","forEach","eventName","isFunction","handler","event","name","hovered","existedHandler","onExpand","onRowExpand","expanded","unref","onMounted","measurable","defineComponent","tableV2RowProps","COMPONENT_NAME","TableV2Row","setup","expose","slots","attrs","isArray","columnsStyles","expandColumnKey","depth","ColumnCells","expandable","column","columnIndex","expandIconProps","undefined","cells","node","_createVNode","_mergeProps","exceptHeightStyle"],"mappings":"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"}