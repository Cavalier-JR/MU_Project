import type { ComponentInternalInstance, ExtractPropTypes, PropType } from 'vue';
import type { FormContext, FormItemContext } from 'element-plus/es/tokens';
import type { ICheckboxGroupInstance } from './checkbox.type';
export declare const useCheckboxGroupProps: {
    modelValue: {
        type: PropType<(string | number)[]>;
        default: () => never[];
    };
    disabled: BooleanConstructor;
    min: {
        type: NumberConstructor;
        default: undefined;
    };
    max: {
        type: NumberConstructor;
        default: undefined;
    };
    size: {
        type: PropType<"" | "default" | "small" | "large">;
        validator: (val: string) => val is "" | "default" | "small" | "large";
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    label: {
        type: StringConstructor;
        default: undefined;
    };
    fill: {
        type: StringConstructor;
        default: undefined;
    };
    textColor: {
        type: StringConstructor;
        default: undefined;
    };
    tag: {
        type: StringConstructor;
        default: string;
    };
};
export declare type IUseCheckboxGroupProps = ExtractPropTypes<typeof useCheckboxGroupProps>;
export declare const useCheckboxProps: {
    modelValue: {
        type: (BooleanConstructor | StringConstructor | NumberConstructor)[];
        default: () => undefined;
    };
    label: {
        type: (BooleanConstructor | ObjectConstructor | StringConstructor | NumberConstructor)[];
    };
    indeterminate: BooleanConstructor;
    disabled: BooleanConstructor;
    checked: BooleanConstructor;
    name: {
        type: StringConstructor;
        default: undefined;
    };
    trueLabel: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    falseLabel: {
        type: (StringConstructor | NumberConstructor)[];
        default: undefined;
    };
    id: {
        type: StringConstructor;
        default: undefined;
    };
    controls: {
        type: StringConstructor;
        default: undefined;
    };
    border: BooleanConstructor;
    size: {
        type: PropType<"" | "default" | "small" | "large">;
        validator: (val: string) => val is "" | "default" | "small" | "large";
    };
    tabindex: (StringConstructor | NumberConstructor)[];
};
export declare type IUseCheckboxProps = ExtractPropTypes<typeof useCheckboxProps>;
export declare const useCheckboxGroup: () => {
    isGroup: import("vue").ComputedRef<boolean>;
    checkboxGroup: ICheckboxGroupInstance;
    elForm: FormContext;
    elFormItemSize: import("vue").ComputedRef<"" | "default" | "small" | "large">;
    elFormItem: FormItemContext;
};
export declare const useCheckboxGroupId: (props: IUseCheckboxGroupProps, { elFormItem }: Partial<ReturnType<typeof useCheckboxGroup>>) => {
    isLabeledByFormItem: import("vue").ComputedRef<boolean>;
    groupId: import("vue").Ref<string | undefined>;
};
export declare const useCheckbox: (props: IUseCheckboxProps, slots: ComponentInternalInstance['slots']) => {
    elFormItem: FormItemContext;
    inputId: import("vue").Ref<string | undefined>;
    isLabeledByFormItem: import("vue").ComputedRef<boolean>;
    isChecked: import("vue").ComputedRef<boolean>;
    isDisabled: import("vue").ComputedRef<boolean>;
    isGroup: import("vue").ComputedRef<boolean>;
    checkboxSize: import("vue").ComputedRef<"" | "default" | "small" | "large">;
    hasOwnLabel: import("vue").ComputedRef<boolean>;
    model: import("vue").WritableComputedRef<any>;
    handleChange: (e: InputEvent) => void;
    onClickRoot: (e: MouseEvent) => Promise<void>;
    focus: import("vue").Ref<boolean>;
    size: import("vue").ComputedRef<"" | "default" | "small" | "large">;
};
