{"version":3,"file":"index2.mjs","sources":["../../../../../../packages/components/descriptions/src/index.vue"],"sourcesContent":["<template>\n  <div :class=\"descriptionKls\">\n    <div\n      v-if=\"title || extra || $slots.title || $slots.extra\"\n      :class=\"ns.e('header')\"\n    >\n      <div :class=\"ns.e('title')\">\n        <slot name=\"title\">{{ title }}</slot>\n      </div>\n      <div :class=\"ns.e('extra')\">\n        <slot name=\"extra\">{{ extra }}</slot>\n      </div>\n    </div>\n\n    <div :class=\"ns.e('body')\">\n      <table :class=\"[ns.e('table'), ns.is('bordered', border)]\">\n        <tbody>\n          <template v-for=\"(row, index) in getRows()\" :key=\"index\">\n            <el-descriptions-row :row=\"row\" />\n          </template>\n        </tbody>\n      </table>\n    </div>\n  </div>\n</template>\n\n<script lang=\"ts\">\nimport { computed, defineComponent, provide } from 'vue'\nimport { isValidComponentSize } from '@element-plus/utils'\nimport { useNamespace, useSize } from '@element-plus/hooks'\nimport DescriptionsRow from './descriptions-row.vue'\nimport { elDescriptionsKey } from './token'\n\nimport type { PropType } from 'vue'\nimport type { ComponentSize } from '@element-plus/constants'\n\nexport default defineComponent({\n  name: 'ElDescriptions',\n  components: {\n    [DescriptionsRow.name]: DescriptionsRow,\n  },\n  props: {\n    border: {\n      type: Boolean,\n      default: false,\n    },\n    column: {\n      type: Number,\n      default: 3,\n    },\n    direction: {\n      type: String as PropType<'horizontal' | 'vertical'>,\n      default: 'horizontal',\n    },\n    size: {\n      type: String as PropType<ComponentSize>,\n      validator: isValidComponentSize,\n    },\n    title: {\n      type: String,\n      default: '',\n    },\n    extra: {\n      type: String,\n      default: '',\n    },\n  },\n  setup(props, { slots }) {\n    provide(elDescriptionsKey, props)\n\n    const descriptionsSize = useSize()\n    const ns = useNamespace('descriptions')\n\n    const descriptionKls = computed(() => [\n      ns.b(),\n      ns.m(descriptionsSize.value),\n    ])\n\n    const flattedChildren = (children) => {\n      const temp = Array.isArray(children) ? children : [children]\n      const res = []\n      temp.forEach((child) => {\n        if (Array.isArray(child.children)) {\n          res.push(...flattedChildren(child.children))\n        } else {\n          res.push(child)\n        }\n      })\n      return res\n    }\n\n    const filledNode = (node, span, count, isLast = false) => {\n      if (!node.props) {\n        node.props = {}\n      }\n      if (span > count) {\n        node.props.span = count\n      }\n      if (isLast) {\n        // set the last span\n        node.props.span = span\n      }\n      return node\n    }\n\n    const getRows = () => {\n      const children = flattedChildren(slots.default?.()).filter(\n        (node) => node?.type?.name === 'ElDescriptionsItem'\n      )\n      const rows = []\n      let temp = []\n      let count = props.column\n      let totalSpan = 0 // all spans number of item\n\n      children.forEach((node, index) => {\n        const span = node.props?.span || 1\n\n        if (index < children.length - 1) {\n          totalSpan += span > count ? count : span\n        }\n\n        if (index === children.length - 1) {\n          // calculate the last item span\n          const lastSpan = props.column - (totalSpan % props.column)\n          temp.push(filledNode(node, lastSpan, count, true))\n          rows.push(temp)\n          return\n        }\n\n        if (span < count) {\n          count -= span\n          temp.push(node)\n        } else {\n          temp.push(filledNode(node, span, count))\n          rows.push(temp)\n          count = props.column\n          temp = []\n        }\n      })\n\n      return rows\n    }\n\n    return {\n      descriptionKls,\n      getRows,\n      ns,\n    }\n  },\n})\n</script>\n"],"names":["_resolveComponent","_openBlock","_createElementBlock","_normalizeClass","_createElementVNode","_renderSlot","_createTextVNode","_toDisplayString","_createCommentVNode"],"mappings":"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"}