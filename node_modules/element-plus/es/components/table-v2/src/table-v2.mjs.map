{"version":3,"file":"table-v2.mjs","sources":["../../../../../../packages/components/table-v2/src/table-v2.tsx"],"sourcesContent":["import { defineComponent, provide, unref } from 'vue'\nimport { useNamespace } from '@element-plus/hooks'\nimport { useTable } from './use-table'\nimport { TableV2InjectionKey } from './tokens'\nimport { tableV2Props } from './table'\n// renderers\nimport MainTable from './renderers/main-table'\nimport LeftTable from './renderers/left-table'\nimport RightTable from './renderers/right-table'\nimport Row from './renderers/row'\nimport Cell from './renderers/cell'\nimport Header from './renderers/header'\nimport HeaderCell from './renderers/header-cell'\nimport Footer from './renderers/footer'\nimport Empty from './renderers/empty'\nimport Overlay from './renderers/overlay'\n\nimport type { TableGridRowSlotParams } from './table-grid'\nimport type { ScrollStrategy } from './composables/use-scrollbar'\nimport type {\n  TableV2HeaderRendererParams,\n  TableV2HeaderRowCellRendererParams,\n  TableV2RowCellRenderParam,\n} from './components'\n\nconst COMPONENT_NAME = 'ElTableV2'\n\nconst TableV2 = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2Props,\n  setup(props, { slots, expose }) {\n    const ns = useNamespace('table-v2')\n\n    const {\n      columnsStyles,\n      fixedColumnsOnLeft,\n      fixedColumnsOnRight,\n      mainColumns,\n      mainTableHeight,\n      fixedTableHeight,\n      leftTableWidth,\n      rightTableWidth,\n      data,\n      depthMap,\n      expandedRowKeys,\n      hasFixedColumns,\n      hoveringRowKey,\n      mainTableRef,\n      leftTableRef,\n      rightTableRef,\n      isDynamic,\n      isResetting,\n      isScrolling,\n\n      bodyWidth,\n      emptyStyle,\n      rootStyle,\n      headerWidth,\n      footerHeight,\n\n      showEmpty,\n\n      // exposes\n      scrollTo,\n      scrollToLeft,\n      scrollToTop,\n      scrollToRow,\n\n      getRowHeight,\n      onColumnSorted,\n      onRowHeightChange,\n      onRowHovered,\n      onRowExpanded,\n      onRowsRendered,\n      onScroll,\n      onVerticalScroll,\n    } = useTable(props)\n\n    expose({\n      /**\n       * @description scroll to a given position\n       * @params params {{ scrollLeft?: number, scrollTop?: number }} where to scroll to.\n       */\n      scrollTo,\n      /**\n       * @description scroll to a given position horizontally\n       * @params scrollLeft {Number} where to scroll to.\n       */\n      scrollToLeft,\n      /**\n       * @description scroll to a given position vertically\n       * @params scrollTop { Number } where to scroll to.\n       */\n      scrollToTop,\n      /**\n       * @description scroll to a given row\n       * @params row {Number} which row to scroll to\n       * @params @optional strategy {ScrollStrategy} use what strategy to scroll to\n       */\n      scrollToRow,\n    })\n\n    provide(TableV2InjectionKey, {\n      ns,\n      isResetting,\n      hoveringRowKey,\n      isScrolling,\n    })\n\n    return () => {\n      const {\n        cache,\n        cellProps,\n        estimatedRowHeight,\n        expandColumnKey,\n        fixedData,\n        headerHeight,\n        headerClass,\n        headerProps,\n        headerCellProps,\n        sortBy,\n        sortState,\n        rowHeight,\n        rowClass,\n        rowEventHandlers,\n        rowKey,\n        rowProps,\n        scrollbarAlwaysOn,\n        indentSize,\n        iconSize,\n        useIsScrolling,\n        vScrollbarSize,\n        width,\n      } = props\n\n      const _data = unref(data)\n\n      const mainTableProps = {\n        cache,\n        class: ns.e('main'),\n        columns: unref(mainColumns),\n        data: _data,\n        fixedData,\n        estimatedRowHeight,\n        bodyWidth: unref(bodyWidth),\n        headerHeight,\n        headerWidth: unref(headerWidth),\n        height: unref(mainTableHeight),\n        mainTableRef,\n        rowKey,\n        rowHeight,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width,\n        getRowHeight,\n        onRowsRendered,\n        onScroll,\n      }\n\n      const leftColumnsWidth = unref(leftTableWidth)\n      const _fixedTableHeight = unref(fixedTableHeight)\n\n      const leftTableProps = {\n        cache,\n        class: ns.e('left'),\n        columns: unref(fixedColumnsOnLeft),\n        data: _data,\n        estimatedRowHeight,\n        leftTableRef,\n        rowHeight,\n        bodyWidth: leftColumnsWidth,\n        headerWidth: leftColumnsWidth,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        useIsScrolling,\n        width: leftColumnsWidth,\n        getRowHeight,\n        onScroll: onVerticalScroll,\n      }\n\n      const rightColumnsWidth = unref(rightTableWidth)\n      const rightColumnsWidthWithScrollbar = rightColumnsWidth + vScrollbarSize\n\n      const rightTableProps = {\n        cache,\n        class: ns.e('right'),\n        columns: unref(fixedColumnsOnRight),\n        data: _data,\n        estimatedRowHeight,\n        rightTableRef,\n        rowHeight,\n        bodyWidth: rightColumnsWidthWithScrollbar,\n        headerWidth: rightColumnsWidthWithScrollbar,\n        headerHeight,\n        height: _fixedTableHeight,\n        rowKey,\n        scrollbarAlwaysOn,\n        scrollbarStartGap: 2,\n        scrollbarEndGap: vScrollbarSize,\n        width: rightColumnsWidthWithScrollbar,\n        style: `--${unref(\n          ns.namespace\n        )}-table-scrollbar-size: ${vScrollbarSize}px`,\n        useIsScrolling,\n        getRowHeight,\n        onScroll: onVerticalScroll,\n      }\n      const _columnsStyles = unref(columnsStyles)\n\n      const tableRowProps = {\n        ns,\n        depthMap: unref(depthMap),\n        columnsStyles: _columnsStyles,\n        expandColumnKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        estimatedRowHeight,\n        hasFixedColumns: unref(hasFixedColumns),\n        hoveringRowKey: unref(hoveringRowKey),\n        rowProps,\n        rowClass,\n        rowKey,\n        rowEventHandlers,\n        onRowHovered,\n        onRowExpanded,\n        onRowHeightChange,\n      }\n\n      const tableCellProps = {\n        cellProps,\n        expandColumnKey,\n        indentSize,\n        iconSize,\n        rowKey,\n        expandedRowKeys: unref(expandedRowKeys),\n        ns,\n      }\n\n      const tableHeaderProps = {\n        ns,\n        headerClass,\n        headerProps,\n        columnsStyles: _columnsStyles,\n      }\n\n      const tableHeaderCellProps = {\n        ns,\n\n        sortBy,\n        sortState,\n        headerCellProps,\n        onColumnSorted,\n      }\n\n      const tableSlots = {\n        row: (props: TableGridRowSlotParams) => (\n          <Row {...props} {...tableRowProps}>\n            {{\n              row: slots.row,\n              cell: (props: TableV2RowCellRenderParam) =>\n                slots.cell ? (\n                  <Cell\n                    {...props}\n                    {...tableCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  >\n                    {slots.cell}\n                  </Cell>\n                ) : (\n                  <Cell\n                    {...props}\n                    {...tableCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  />\n                ),\n            }}\n          </Row>\n        ),\n        header: (props: TableV2HeaderRendererParams) => (\n          <Header {...props} {...tableHeaderProps}>\n            {{\n              header: slots.header,\n              cell: (props: TableV2HeaderRowCellRendererParams) =>\n                slots['header-cell'] ? (\n                  <HeaderCell\n                    {...props}\n                    {...tableHeaderCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  >\n                    {slots['header-cell']}\n                  </HeaderCell>\n                ) : (\n                  <HeaderCell\n                    {...props}\n                    {...tableHeaderCellProps}\n                    style={_columnsStyles[props.column.key]}\n                  />\n                ),\n            }}\n          </Header>\n        ),\n      }\n\n      const rootKls = [\n        props.class,\n        ns.b(),\n        ns.e('root'),\n        {\n          [ns.is('dynamic')]: unref(isDynamic),\n        },\n      ]\n\n      const footerProps = {\n        class: ns.e('footer'),\n        style: unref(footerHeight),\n      }\n\n      return (\n        <div class={rootKls} style={unref(rootStyle)}>\n          <MainTable {...mainTableProps}>{tableSlots}</MainTable>\n          <LeftTable {...leftTableProps}>{tableSlots}</LeftTable>\n          <RightTable {...rightTableProps}>{tableSlots}</RightTable>\n          {slots.footer && (\n            <Footer {...footerProps}>{{ default: slots.footer }}</Footer>\n          )}\n          {unref(showEmpty) && (\n            <Empty class={ns.e('empty')} style={unref(emptyStyle)}>\n              {{ default: slots.empty }}\n            </Empty>\n          )}\n          {slots.overlay && (\n            <Overlay class={ns.e('overlay')}>\n              {{ default: slots.overlay }}\n            </Overlay>\n          )}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableV2\n\nexport type TableV2Instance = InstanceType<typeof TableV2> & {\n  /**\n   * @description scroll to a given position\n   * @params params {{ scrollLeft?: number, scrollTop?: number }} where to scroll to.\n   */\n  scrollTo: (param: { scrollLeft?: number; scrollTop?: number }) => void\n  /**\n   * @description scroll to a given position horizontally\n   * @params scrollLeft {Number} where to scroll to.\n   */\n  scrollToLeft: (scrollLeft: number) => void\n  /**\n   * @description scroll to a given position vertically\n   * @params scrollTop { Number } where to scroll to.\n   */\n  scrollToTop: (scrollTop: number) => void\n  /**\n   * @description scroll to a given row\n   * @params row {Number} which row to scroll to\n   * @params strategy {ScrollStrategy} use what strategy to scroll to\n   */\n  scrollToRow(row: number, strategy?: ScrollStrategy): void\n}\n"],"names":["Overlay","COMPONENT_NAME","TableV2","defineComponent","name","props","setup","slots","expose","columnsStyles","fixedColumnsOnLeft","fixedColumnsOnRight","mainColumns","mainTableHeight","fixedTableHeight","leftTableWidth","rightTableWidth","data","depthMap","expandedRowKeys","hasFixedColumns","hoveringRowKey","mainTableRef","leftTableRef","rightTableRef","isDynamic","isResetting","isScrolling","bodyWidth","emptyStyle","rootStyle","headerWidth","footerHeight","showEmpty","scrollTo","scrollToLeft","scrollToTop","scrollToRow","getRowHeight","onColumnSorted","onRowHeightChange","onRowHovered","onRowExpanded","onRowsRendered","onScroll","onVerticalScroll","useTable","provide","TableV2InjectionKey","ns","cache","cellProps","estimatedRowHeight","expandColumnKey","fixedData","headerHeight","headerClass","headerProps","headerCellProps","sortBy","sortState","rowHeight","rowClass","rowEventHandlers","rowKey","rowProps","scrollbarAlwaysOn","indentSize","iconSize","useIsScrolling","vScrollbarSize","width","_data","class","columns","unref","height","scrollbarStartGap","scrollbarEndGap","_fixedTableHeight","style","_createVNode","Row","_mergeProps","Cell","tableCellProps","Header","HeaderCell","tableHeaderProps","_columnsStyles","row","cell","RightTable","Empty","header","column","key"],"mappings":"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"}