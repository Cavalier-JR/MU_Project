{"version":3,"file":"table-grid.mjs","sources":["../../../../../../packages/components/table-v2/src/table-grid.tsx"],"sourcesContent":["import { computed, defineComponent, inject, ref, unref } from 'vue'\nimport {\n  DynamicSizeGrid,\n  FixedSizeGrid,\n} from '@element-plus/components/virtual-list'\nimport { isNumber, isObject } from '@element-plus/utils'\nimport { Header } from './components'\nimport { TableV2InjectionKey } from './tokens'\nimport { tableV2GridProps } from './grid'\nimport { sum } from './utils'\n\nimport type { UnwrapRef } from 'vue'\nimport type {\n  DynamicSizeGridInstance,\n  GridDefaultSlotParams,\n  GridItemKeyGetter,\n  GridItemRenderedEvtParams,\n  GridScrollOptions,\n  ResetAfterIndex,\n  Alignment as ScrollStrategy,\n} from '@element-plus/components/virtual-list'\nimport type { TableV2HeaderInstance } from './components'\nimport type { TableV2GridProps } from './grid'\n\nconst COMPONENT_NAME = 'ElTableV2Grid'\n\nconst useTableGrid = (props: TableV2GridProps) => {\n  const headerRef = ref<TableV2HeaderInstance>()\n  const bodyRef = ref<DynamicSizeGridInstance>()\n\n  const totalHeight = computed(() => {\n    const { data, rowHeight, estimatedRowHeight } = props\n\n    if (estimatedRowHeight) {\n      return\n    }\n\n    return data.length * (rowHeight as number)\n  })\n\n  const fixedRowHeight = computed(() => {\n    const { fixedData, rowHeight } = props\n\n    return (fixedData?.length || 0) * (rowHeight as number)\n  })\n\n  const headerHeight = computed(() => sum(props.headerHeight))\n\n  const gridHeight = computed(() => {\n    const { height } = props\n    return Math.max(0, height - unref(headerHeight) - unref(fixedRowHeight))\n  })\n\n  const hasHeader = computed(() => {\n    return unref(headerHeight) + unref(fixedRowHeight) > 0\n  })\n\n  const itemKey: GridItemKeyGetter = ({ data, rowIndex }) =>\n    data[rowIndex][props.rowKey]\n\n  function onItemRendered({\n    rowCacheStart,\n    rowCacheEnd,\n    rowVisibleStart,\n    rowVisibleEnd,\n  }: GridItemRenderedEvtParams) {\n    props.onRowsRendered?.({\n      rowCacheStart,\n      rowCacheEnd,\n      rowVisibleStart,\n      rowVisibleEnd,\n    })\n  }\n\n  function resetAfterRowIndex(index: number, forceUpdate: boolean) {\n    bodyRef.value?.resetAfterRowIndex(index, forceUpdate)\n  }\n\n  function scrollTo(x: number, y: number): void\n  function scrollTo(options: GridScrollOptions): void\n  function scrollTo(leftOrOptions: number | GridScrollOptions, top?: number) {\n    const header$ = unref(headerRef)\n    const body$ = unref(bodyRef)\n\n    if (!header$ || !body$) return\n\n    if (isObject(leftOrOptions)) {\n      header$.scrollToLeft(leftOrOptions.scrollLeft)\n      body$.scrollTo(leftOrOptions)\n    } else {\n      header$.scrollToLeft(leftOrOptions)\n      body$.scrollTo({\n        scrollLeft: leftOrOptions,\n        scrollTop: top,\n      })\n    }\n  }\n\n  function scrollToTop(scrollTop: number) {\n    unref(bodyRef)?.scrollTo({\n      scrollTop,\n    })\n  }\n\n  function scrollToRow(row: number, strategy: ScrollStrategy) {\n    unref(bodyRef)?.scrollToItem(row, 1, strategy)\n  }\n\n  function forceUpdate() {\n    unref(bodyRef)?.$forceUpdate()\n    unref(headerRef)?.$forceUpdate()\n  }\n\n  return {\n    bodyRef,\n    forceUpdate,\n    fixedRowHeight,\n    gridHeight,\n    hasHeader,\n    headerHeight,\n    headerRef,\n    totalHeight,\n\n    itemKey,\n    onItemRendered,\n    resetAfterRowIndex,\n    scrollTo,\n    scrollToTop,\n    scrollToRow,\n  }\n}\n\nconst TableGrid = defineComponent({\n  name: COMPONENT_NAME,\n  props: tableV2GridProps,\n  setup(props, { slots, expose }) {\n    const { ns } = inject(TableV2InjectionKey)!\n\n    const {\n      bodyRef,\n      fixedRowHeight,\n      gridHeight,\n      hasHeader,\n      headerRef,\n      headerHeight,\n      totalHeight,\n\n      forceUpdate,\n      itemKey,\n      onItemRendered,\n      resetAfterRowIndex,\n      scrollTo,\n      scrollToTop,\n      scrollToRow,\n    } = useTableGrid(props)\n\n    expose({\n      forceUpdate,\n      /**\n       * @description fetch total height\n       */\n      totalHeight,\n      /**\n       * @description scroll to a position\n       */\n      scrollTo,\n      /**\n       * @description scroll vertically to position y\n       */\n      scrollToTop,\n      /**\n       * @description scroll to a given row\n       * @params row {Number} which row to scroll to\n       * @params strategy {ScrollStrategy} use what strategy to scroll to\n       */\n      scrollToRow,\n      /**\n       * @description reset rendered state after row index\n       */\n      resetAfterRowIndex,\n    })\n\n    const getColumnWidth = () => props.bodyWidth\n\n    return () => {\n      const {\n        cache,\n        columns,\n        data,\n        fixedData,\n        useIsScrolling,\n        scrollbarAlwaysOn,\n        scrollbarEndGap,\n        scrollbarStartGap,\n        style,\n        rowHeight,\n        bodyWidth,\n        estimatedRowHeight,\n        headerWidth,\n        height,\n        width,\n\n        getRowHeight,\n        onScroll,\n      } = props\n\n      const isDynamicRowEnabled = isNumber(estimatedRowHeight)\n      const Grid = isDynamicRowEnabled ? DynamicSizeGrid : FixedSizeGrid\n      const _headerHeight = unref(headerHeight)\n\n      return (\n        <div role=\"table\" class={[ns.e('table'), props.class]} style={style}>\n          <Grid\n            ref={bodyRef}\n            // special attrs\n            data={data}\n            useIsScrolling={useIsScrolling}\n            itemKey={itemKey}\n            // column attrs\n            columnCache={0}\n            columnWidth={isDynamicRowEnabled ? getColumnWidth : bodyWidth}\n            totalColumn={1}\n            // row attrs\n            totalRow={data.length}\n            rowCache={cache}\n            rowHeight={isDynamicRowEnabled ? getRowHeight : rowHeight}\n            // DOM attrs\n            width={width}\n            height={unref(gridHeight)}\n            class={ns.e('body')}\n            scrollbarStartGap={scrollbarStartGap}\n            scrollbarEndGap={scrollbarEndGap}\n            scrollbarAlwaysOn={scrollbarAlwaysOn}\n            // handlers\n            onScroll={onScroll}\n            onItemRendered={onItemRendered}\n            perfMode={false}\n          >\n            {{\n              default: (params: GridDefaultSlotParams) => {\n                const rowData = data[params.rowIndex]\n                return slots.row?.({\n                  ...params,\n                  columns,\n                  rowData,\n                })\n              },\n            }}\n          </Grid>\n          {unref(hasHeader) && (\n            <Header\n              ref={headerRef}\n              class={ns.e('header-wrapper')}\n              columns={columns}\n              headerData={data}\n              headerHeight={props.headerHeight}\n              fixedHeaderData={fixedData}\n              rowWidth={headerWidth}\n              rowHeight={rowHeight}\n              width={width}\n              height={Math.min(_headerHeight + unref(fixedRowHeight), height)}\n            >\n              {{\n                dynamic: slots.header,\n                fixed: slots.row,\n              }}\n            </Header>\n          )}\n        </div>\n      )\n    }\n  },\n})\n\nexport default TableGrid\n\nexport type TableGridRowSlotParams = {\n  columns: TableV2GridProps['columns']\n  rowData: any\n} & GridDefaultSlotParams\n\nexport type TableGridInstance = InstanceType<typeof TableGrid> &\n  UnwrapRef<{\n    forceUpdate: () => void\n    /**\n     * @description fetch total height\n     */\n    totalHeight: number\n\n    /**\n     * @description scrollTo a position\n     * @param { number | ScrollToOptions } arg1\n     * @param { number } arg2\n     */\n    scrollTo(leftOrOptions: number | GridScrollOptions, top?: number): void\n\n    /**\n     * @description scroll vertically to position y\n     */\n    scrollToTop(scrollTop: number): void\n    /**\n     * @description scroll to a given row\n     * @params row {Number} which row to scroll to\n     * @params @optional strategy {ScrollStrategy} use what strategy to scroll to\n     */\n    scrollToRow(row: number, strategy: ScrollStrategy): void\n    /**\n     * @description reset rendered state after row index\n     * @param { number } rowIndex\n     * @param { boolean } forceUpdate\n     */\n    resetAfterRowIndex: ResetAfterIndex\n  }>\n"],"names":["COMPONENT_NAME","useTableGrid","props","headerRef","ref","bodyRef","data","rowHeight","estimatedRowHeight","fixedData","headerHeight","gridHeight","height","Math","max","unref","hasHeader","itemKey","rowIndex","rowCacheStart","rowCacheEnd","rowVisibleStart","rowVisibleEnd","onRowsRendered","forceUpdate","header$","scrollToLeft","leftOrOptions","body$","scrollLeft","scrollTop","scrollToTop","row","fixedRowHeight","totalHeight","onItemRendered","scrollTo","scrollToRow","TableGrid","name","setup","slots","expose","ns","inject","TableV2InjectionKey","resetAfterRowIndex","cache","columns","useIsScrolling","scrollbarAlwaysOn","scrollbarEndGap","scrollbarStartGap","style","bodyWidth","headerWidth","width","getRowHeight","onScroll","isDynamicRowEnabled","Grid","_headerHeight","_createVNode","Header","e","class"],"mappings":"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"}